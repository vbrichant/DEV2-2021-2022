import tp07_vBrichant

# fractionNullDen = tp07vbrichant.Fraction(1, 0)
fractionNullNum = tp07vbrichant.Fraction(0, 12)
fraction1 = tp07vbrichant.Fraction(1, 2)
fraction2 = tp07vbrichant.Fraction(3, 7)
fraction3 = tp07vbrichant.Fraction(5, 14)
fraction4 = tp07vbrichant.Fraction(3, 15)
fraction5 = tp07vbrichant.Fraction(15, 5)
fraction6 = tp07vbrichant.Fraction(-2, 5)
fraction7 = tp07vbrichant.Fraction(1, -5)
try:
    print(tp07vbrichant.Fraction(1, 0))
except ZeroDivisionError:
    print("la création d'une fraction ayant un den = à 0 a lancé une exception")
print("\n")
print("test +")
print("1/2 + 3/7) = " + str(fraction1 + fraction2))
print("1/2 + 5/14 = " + str(fraction1 + fraction3))
print("1/2 + 3/15 = " + str(fraction1 + fraction4))
print("1/2 + 4 = " + str(fraction1 + 4))
print("1/2 + 1/-5) = " + str(fraction1 + fraction7))
print("\n")
print("test -")
print("1/2 - 3/7) = " + str(fraction1 - fraction2))
print("1/2 - 5/14 = " + str(fraction1 - fraction3))
print("1/2 - 3/15 = " + str(fraction1 - fraction4))
print("1/2 - 4 = " + str(fraction1 - 4))
print("1/2 - (-2/5) = " + str(fraction1 - fraction6))
print("\n")
print("test *")
print("1/2 * 3/7) = " + str(fraction1 * fraction2))
print("1/2 * 5/14 = " + str(fraction1 * fraction3))
print("1/2 * 3/15 = " + str(fraction1 * fraction4))
print("1/2 * 4 = " + str(fraction1 * 4))
print("1/2 * 0/12) = " + str(fraction1 * fractionNullNum))
print("\n")
print("test /")
print("1/2 / 3/7) = " + str(fraction1 / fraction2))
print("1/2 / 5/14 = " + str(fraction1 / fraction3))
print("1/2 / 3/15 = " + str(fraction1 / fraction4))
print("1/2 / 4 = " + str(fraction1 / 4))
try:
    print(print(fraction1 / fractionNullNum))
except ZeroDivisionError:
    print("la div par 0 a lancé une exception")
print("\n")
print("test as_mixed_number")
print("9/4 : "+str(tp07vbrichant.Fraction(9, 4).as_mixed_number()))
print("-7/2 : "+str(tp07vbrichant.Fraction(-7, 2).as_mixed_number()))
print("-5/3 : "+str(tp07vbrichant.Fraction(-5, 3).as_mixed_number()))
print("\n")
print("test float")
print("1/2 : "+str(float(fraction1)))
print("3/7 : "+str(float(fraction2)))
print("-2/5 : "+str(float(fraction6)))
print("\n")
print("test pow")
print("1/2 ^2 = " + str(pow(fraction1, 2)))
print("1/2 ^-2 = " + str(pow(fraction1, -2)))
print("-2/5 ^-2 = " + str(pow(fraction6, -2)))
print("-2/5 ^2 = " + str(pow(fraction6, 2)))
print("\n")
print("test =")
print("1/2 = 1/2 ? " + str(fraction1 == tp07vbrichant.Fraction(1, 2)))
print("1/2 = -1/2 ? " + str(fraction1 == tp07vbrichant.Fraction(-1, 2)))
print("1/2 = 1/3 ? " + str(fraction1 == tp07vbrichant.Fraction(1, 3)))
print("1/2 = 6/14 ? " + str(fraction1 == tp07vbrichant.Fraction(6, 14)))
print("\n")
print("test is zero")
print("1/2 : " + str(fraction1.is_zero()))
print("3/7 : " + str(fraction2.is_zero()))
print("0/12 : " + str(fractionNullNum.is_zero()))
print("0 : " + str(tp07vbrichant.Fraction(0).is_zero()))
print("\n")
print("test is integer")
print("1/2 : " + str(fraction1.is_integer()))
print("15/5 : " + str(fraction5.is_integer()))
print("\n")
print("test is proper")
print("1/2" + str(fraction1.is_proper()))
print("15/5" + str(fraction5.is_proper()))
print("\n")
print("test is unit")
print("1/2 : " + str(fraction1.is_unit()))
print("15/5 : " + str(fraction5.is_unit()))
print("\n")
print("test is adjacent to")
print("1/2 et 1/3 : " + str(fraction1.is_adjacent_to(tp07vbrichant.Fraction(1, 3))))
print("1/3 et 1/4 : " + str(tp07vbrichant.Fraction(1, 3).is_adjacent_to(tp07vbrichant.Fraction(1, 4))))
print("1/7 et 1/4 : " + str(tp07vbrichant.Fraction(1, 7).is_adjacent_to(tp07vbrichant.Fraction(1, 4))))
